<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jon's To-Do List</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #0a1128, #1e3799);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 25px;
            backdrop-filter: blur(5px);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #1e3799;
            font-size: 2.2rem;
        }
        
        .input-section {
            display: flex;
            margin-bottom: 25px;
            gap: 10px;
        }
        
        .input-section input {
            flex-grow: 1;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        .input-section input:focus {
            outline: none;
            border-color: #1e3799;
        }
        
        .priority-selector {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .priority-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
            color: #333;
        }
        
        .priority-btn.active {
            transform: scale(1.05);
            color: white;
        }
        
        .priority-btn.high {
            background-color: #ff7675;
        }
        
        .priority-btn.medium {
            background-color: #fdcb6e;
        }
        
        .priority-btn.low {
            background-color: #55efc4;
        }
        
        .priority-btn.high.active {
            background-color: #d63031;
        }
        
        .priority-btn.medium.active {
            background-color: #fdcb6e;
        }
        
        .priority-btn.low.active {
            background-color: #00b894;
        }
        
        button {
            padding: 12px 20px;
            background-color: #1e3799;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s, transform 0.2s;
        }
        
        button:hover {
            background-color: #0a1128;
        }
        
        button:active {
            transform: scale(0.95);
        }
        
        .filters {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .filter-btn {
            padding: 8px 15px;
            background-color: #f1f1f1;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
            font-weight: 500;
            color: #555;
        }
        
        .filter-btn.active {
            background-color: #1e3799;
            color: white;
        }
        
        .tasks {
            list-style: none;
        }
        
        .task {
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: all 0.3s;
            border-left: 5px solid #ccc;
            animation: fadeIn 0.5s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .task.high-priority {
            border-left-color: #d63031;
        }
        
        .task.medium-priority {
            border-left-color: #fdcb6e;
        }
        
        .task.low-priority {
            border-left-color: #00b894;
        }
        
        .task.completed {
            opacity: 0.7;
            text-decoration: line-through;
            background-color: #f9f9f9;
        }
        
        .task-content {
            flex-grow: 1;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .task-checkbox {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
        
        .task-text {
            font-size: 1.1rem;
        }
        
        .task-actions {
            display: flex;
            gap: 10px;
        }
        
        .delete-btn, .edit-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 5px;
            color: #555;
            transition: color 0.3s;
        }
        
        .delete-btn:hover {
            color: #d63031;
        }
        
        .edit-btn:hover {
            color: #1e3799;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 0;
            color: #777;
            font-size: 1.1rem;
        }
        
        .timer-section {
            margin-top: 30px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }
        
        .timer-container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        
        .timer {
            flex: 1;
            padding: 15px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .timer-display {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
            color: #1e3799;
        }
        
        .timer-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
        }
        
        .timer-btn {
            padding: 8px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
        }
        
        .start-btn {
            background-color: #00b894;
            color: white;
        }
        
        .pause-btn {
            background-color: #fdcb6e;
        }
        
        .reset-btn {
            background-color: #d63031;
            color: white;
        }
        
        .progress-bar {
            height: 8px;
            background-color: #eee;
            border-radius: 4px;
            margin-top: 15px;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background-color: #1e3799;
            width: 0%;
            transition: width 1s linear;
        }
        
        @media (max-width: 768px) {
            .timer-container {
                flex-direction: column;
            }
        }
        
        @media (max-width: 600px) {
            .input-section {
                flex-direction: column;
            }
            
            .filters {
                flex-direction: column;
            }
            
            .task {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .task-actions {
                align-self: flex-end;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Jon's To-Do List</h1>
        
        <div class="input-section">
            <input type="text" id="taskInput" placeholder="Add a new task...">
            <button id="addTaskBtn">Add Task</button>
        </div>
        
        <div class="priority-selector">
            <span>Priority:</span>
            <button class="priority-btn high" data-priority="high">High</button>
            <button class="priority-btn medium active" data-priority="medium">Medium</button>
            <button class="priority-btn low" data-priority="low">Low</button>
        </div>
        
        <div class="filters">
            <button class="filter-btn active" data-filter="all">All Tasks</button>
            <button class="filter-btn" data-filter="active">Active</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
            <button class="filter-btn" data-filter="high">High Priority</button>
            <button class="filter-btn" data-filter="medium">Medium Priority</button>
            <button class="filter-btn" data-filter="low">Low Priority</button>
        </div>
        
        <ul class="tasks" id="tasksList">
            <!-- Tasks will be added here -->
        </ul>
        
        <div class="empty-state" id="emptyState">
            <p>No tasks yet. Add a task to get started!</p>
        </div>
        
        <div class="timer-section">
            <h3>Focus Timers</h3>
            <div class="timer-container">
                <div class="timer">
                    <h4>Pomodoro Timer</h4>
                    <div class="timer-display" id="timerDisplay">25:00</div>
                    <div class="timer-controls">
                        <button class="timer-btn start-btn" id="startTimer">Start</button>
                        <button class="timer-btn pause-btn" id="pauseTimer">Pause</button>
                        <button class="timer-btn reset-btn" id="resetTimer">Reset</button>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="timerProgress"></div>
                    </div>
                </div>
                
                <div class="timer">
                    <h4>Side Quest Timer</h4>
                    <div class="timer-display" id="sideQuestTimerDisplay">05:00</div>
                    <div class="timer-controls">
                        <button class="timer-btn start-btn" id="startSideQuestTimer">Start</button>
                        <button class="timer-btn pause-btn" id="pauseSideQuestTimer">Pause</button>
                        <button class="timer-btn reset-btn" id="resetSideQuestTimer">Reset</button>
                    </div>
                    <div class="progress-bar">
                        <div class="progress" id="sideQuestTimerProgress"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const taskInput = document.getElementById('taskInput');
            const addTaskBtn = document.getElementById('addTaskBtn');
            const tasksList = document.getElementById('tasksList');
            const emptyState = document.getElementById('emptyState');
            const priorityBtns = document.querySelectorAll('.priority-btn');
            const filterBtns = document.querySelectorAll('.filter-btn');
            
            // Pomodoro Timer Elements
            const timerDisplay = document.getElementById('timerDisplay');
            const startTimerBtn = document.getElementById('startTimer');
            const pauseTimerBtn = document.getElementById('pauseTimer');
            const resetTimerBtn = document.getElementById('resetTimer');
            const timerProgress = document.getElementById('timerProgress');
            
            // Side Quest Timer Elements
            const sideQuestTimerDisplay = document.getElementById('sideQuestTimerDisplay');
            const startSideQuestTimerBtn = document.getElementById('startSideQuestTimer');
            const pauseSideQuestTimerBtn = document.getElementById('pauseSideQuestTimer');
            const resetSideQuestTimerBtn = document.getElementById('resetSideQuestTimer');
            const sideQuestTimerProgress = document.getElementById('sideQuestTimerProgress');
            
            // Variables
            let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
            let currentFilter = 'all';
            let selectedPriority = 'medium';
            
            // Pomodoro Timer Variables
            let timerMinutes = 25;
            let timerSeconds = 0;
            let timerInterval;
            let timerRunning = false;
            let totalSeconds = timerMinutes * 60;
            let remainingSeconds = totalSeconds;
            
            // Side Quest Timer Variables
            let sideQuestTimerMinutes = 5;
            let sideQuestTimerSeconds = 0;
            let sideQuestTimerInterval;
            let sideQuestTimerRunning = false;
            let sideQuestTotalSeconds = sideQuestTimerMinutes * 60;
            let sideQuestRemainingSeconds = sideQuestTotalSeconds;
            
            // Initialize
            renderTasks();
            updateEmptyState();
            
            // Event Listeners
            addTaskBtn.addEventListener('click', addTask);
            taskInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addTask();
                }
            });
            
            priorityBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    priorityBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    selectedPriority = this.dataset.priority;
                });
            });
            
            filterBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    filterBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentFilter = this.dataset.filter;
                    renderTasks();
                });
            });
            
            // Pomodoro Timer Event Listeners
            startTimerBtn.addEventListener('click', startTimer);
            pauseTimerBtn.addEventListener('click', pauseTimer);
            resetTimerBtn.addEventListener('click', resetTimer);
            
            // Side Quest Timer Event Listeners
            startSideQuestTimerBtn.addEventListener('click', startSideQuestTimer);
            pauseSideQuestTimerBtn.addEventListener('click', pauseSideQuestTimer);
            resetSideQuestTimerBtn.addEventListener('click', resetSideQuestTimer);
            
            // Functions
            function addTask() {
                const taskText = taskInput.value.trim();
                if (taskText) {
                    const newTask = {
                        id: Date.now(),
                        text: taskText,
                        completed: false,
                        priority: selectedPriority,
                        createdAt: new Date().toISOString()
                    };
                    
                    tasks.push(newTask);
                    saveTasks();
                    renderTasks();
                    taskInput.value = '';
                    updateEmptyState();
                }
            }
            
            function renderTasks() {
                tasksList.innerHTML = '';
                
                let filteredTasks = tasks;
                
                if (currentFilter === 'active') {
                    filteredTasks = tasks.filter(task => !task.completed);
                } else if (currentFilter === 'completed') {
                    filteredTasks = tasks.filter(task => task.completed);
                } else if (['high', 'medium', 'low'].includes(currentFilter)) {
                    filteredTasks = tasks.filter(task => task.priority === currentFilter);
                }
                
                filteredTasks.forEach(task => {
                    const taskElement = document.createElement('li');
                    taskElement.className = `task ${task.priority}-priority ${task.completed ? 'completed' : ''}`;
                    taskElement.innerHTML = `
                        <div class="task-content">
                            <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''}>
                            <span class="task-text">${task.text}</span>
                        </div>
                        <div class="task-actions">
                            <button class="edit-btn">✏️</button>
                            <button class="delete-btn">🗑️</button>
                        </div>
                    `;
                    
                    // Add event listeners
                    const checkbox = taskElement.querySelector('.task-checkbox');
                    checkbox.addEventListener('change', () => toggleTaskCompletion(task.id));
                    
                    const deleteBtn = taskElement.querySelector('.delete-btn');
                    deleteBtn.addEventListener('click', () => deleteTask(task.id));
                    
                    const editBtn = taskElement.querySelector('.edit-btn');
                    editBtn.addEventListener('click', () => editTask(task.id));
                    
                    tasksList.appendChild(taskElement);
                });
                
                updateEmptyState();
            }
            
            function toggleTaskCompletion(taskId) {
                tasks = tasks.map(task => {
                    if (task.id === taskId) {
                        return { ...task, completed: !task.completed };
                    }
                    return task;
                });
                
                saveTasks();
                renderTasks();
            }
            
            function deleteTask(taskId) {
                tasks = tasks.filter(task => task.id !== taskId);
                saveTasks();
                renderTasks();
            }
            
            function editTask(taskId) {
                const task = tasks.find(t => t.id === taskId);
                if (task) {
                    const newText = prompt('Edit task:', task.text);
                    if (newText !== null) {
                        tasks = tasks.map(t => {
                            if (t.id === taskId) {
                                return { ...t, text: newText.trim() };
                            }
                            return t;
                        });
                        saveTasks();
                        renderTasks();
                    }
                }
            }
            
            function saveTasks() {
                localStorage.setItem('tasks', JSON.stringify(tasks));
            }
            
            function updateEmptyState() {
                if (tasks.length === 0) {
                    emptyState.style.display = 'block';
                } else {
                    emptyState.style.display = 'none';
                }
            }
            
            // Pomodoro Timer Functions
            function startTimer() {
                if (!timerRunning) {
                    timerRunning = true;
                    timerInterval = setInterval(updateTimer, 1000);
                }
            }
            
            function pauseTimer() {
                timerRunning = false;
                clearInterval(timerInterval);
            }
            
            function resetTimer() {
                pauseTimer();
                remainingSeconds = totalSeconds;
                updateTimerDisplay();
                timerProgress.style.width = '0%';
            }
            
            function updateTimer() {
                if (remainingSeconds > 0) {
                    remainingSeconds--;
                    updateTimerDisplay();
                    
                    // Update progress bar
                    const progressPercentage = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
                    timerProgress.style.width = `${progressPercentage}%`;
                } else {
                    pauseTimer();
                    alert('Pomodoro time is up! Take a break.');
                    resetTimer();
                }
            }
            
            function updateTimerDisplay() {
                const minutes = Math.floor(remainingSeconds / 60);
                const seconds = remainingSeconds % 60;
                timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
            
            // Side Quest Timer Functions
            function startSideQuestTimer() {
                if (!sideQuestTimerRunning) {
                    sideQuestTimerRunning = true;
                    sideQuestTimerInterval = setInterval(updateSideQuestTimer, 1000);
                }
            }
            
            function pauseSideQuestTimer() {
                sideQuestTimerRunning = false;
                clearInterval(sideQuestTimerInterval);
            }
            
            function resetSideQuestTimer() {
                pauseSideQuestTimer();
                sideQuestRemainingSeconds = sideQuestTotalSeconds;
                updateSideQuestTimerDisplay();
                sideQuestTimerProgress.style.width = '0%';
            }
            
            function updateSideQuestTimer() {
                if (sideQuestRemainingSeconds > 0) {
                    sideQuestRemainingSeconds--;
                    updateSideQuestTimerDisplay();
                    
                    // Update progress bar
                    const progressPercentage = ((sideQuestTotalSeconds - sideQuestRemainingSeconds) / sideQuestTotalSeconds) * 100;
                    sideQuestTimerProgress.style.width = `${progressPercentage}%`;
                } else {
                    pauseSideQuestTimer();
                    alert('Side Quest time is up! Back to your main task!');
                    resetSideQuestTimer();
                }
            }
            
            function updateSideQuestTimerDisplay() {
                const minutes = Math.floor(sideQuestRemainingSeconds / 60);
                const seconds = sideQuestRemainingSeconds % 60;
                sideQuestTimerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
        });
    </script>
</body>
</html>
